/*
 * O objetivo desse projeto é setar os valores iniciais dos motores para teste
 */
#include <mpu_6050.h>
#include <stdio.h>
#include "board.h"
#include "peripherals.h"
#include "pin_mux.h"
#include "clock_config.h"
#include "MKL25Z4.h"
#include "fsl_debug_console.h"
#include "fsl_i2c.h"
#include "fsl_tpm.h"
//#include "fsl_pit.h"
#include "fsl_gpio.h"
/* TODO: insert other include files here. */
#include "function.h"
#include "fsl_pit.h"
#include "fsl_dac.h"
//#include "arm_math.h"

/* TODO: insert other definitions and declarations here. */
//#define Ts (1.0f/40.0f)
#define Ts (1.0f/100.0f)
#define fs 100

// Variáveis Globais
// Definição do endereçamento dos 4 sensores
acc_data_t acc_1 = { .address = 0x68, .I2C = I2C0, };
acc_data_t acc_2 = { .address = 0x69, .I2C = I2C0, };
acc_data_t acc_3 = { .address = 0x68, .I2C = I2C1, };
acc_data_t acc_4 = { .address = 0x69, .I2C = I2C1, };
// Variáveis para o cálculo do Ângulo do Giroscópio
float angGy = 0;
float angGy_aux = 0;
// Variável do ângulo do acelerômetro
float acc_pitch = 0;
// Variável do ângulo da fusão sensorial
float fused = 0;
float aleatorio;
// Variáveis para os duty_cycles dos motores
int duty_0 = 3;
int duty_1 = 7;
int duty_2 = 3;
int contador_2 = 1200;
int direcao_2 = 1;
float valor_prbs[100] = { 1.192, 1.0019, 3.0962, 2.2551, 1.2974, 0.3097, 2.3065,
		2.0011, 0.23186, 0.3784, 3.0822, 1.56, 0.070379, 0.16903, 0.44234,
		2.8055, 1.4627, 1.7611, 1.5526, 0.21285, 2.8186, 0.9061, 0.84481,
		1.8658, 1.4943, 1.1565, 2.0586, 2.9459, 1.9481, 0.88812, 0.64427,
		1.3789, 0.085566, 2.7512, 1.9157, 0.63928, 1.6325, 0.16901, 2.7073,
		1.3908, 1.7207, 1.7799, 2.1364, 1.1661, 0.24564, 1.4329, 0.15023,
		2.3181, 0.11932, 2.9963, 2.331, 2.9436, 1.612, 0.75644, 0.81629, 2.3832,
		3.1191, 1.1201, 2.364, 0.34555, 1.8747, 1.3521, 2.2945, 0.82009, 0.2977,
		1.416, 2.0098, 0.4146, 1.4219, 2.0479, 2.5968, 0.96736, 1.2634, 2.7765,
		2.1998, 0.75948, 2.3859, 0.91351, 0.87116, 0.019179, 1.1766, 1.372,
		0.9555, 0.9133, 0.7615, 2.9412, 2.701, 1.2473, 1.5054, 1.7741, 1.5374,
		0.84721, 3.1078, 0.57674, 2.7056, 0.10247, 1.0423, 2.3511, 2.0233,
		0.53141 };
int k = 3000;
int amostra = 0;
int valor_pwm;

void inicializar_dac(float tensao_max) {
	static dac_config_t DAC_CONFIG;
	DAC_CONFIG.enableLowPowerMode = false;
	DAC_CONFIG.referenceVoltageSource = kDAC_ReferenceVoltageSourceVref2; //Ver qua eh
	DAC_Init(DAC0, &DAC_CONFIG);
	DAC_Enable(DAC0, true);
	DAC_SetBufferReadPointer(DAC0, 0U);
	// Valor de tensão entre 0 e 3,3 V
	uint16_t dacValue = (tensao_max * 4096.0f) / 3.31f;
	DAC_SetBufferValue(DAC0, 0U, dacValue);
}
void atualizar_dac(uint16_t dacValue) {
	if (dacValue < 0)
		dacValue = 0;
	if (dacValue > 4096)
		dacValue = 4096;
	// Valor de 12 bits entre 0 e 4096
	DAC_SetBufferValue(DAC0, 0U, dacValue);
}

void calibrar_sensor(acc_data_t *acc) {
	int i = 0;
	int Tcal = 100;
	//int Tcal = 3; // para debugar
	//Faz a leitura de todos os dados de giroscópio e acelerômetro
	ACC_ReadRaw(acc);
	//Calcula as acelerações em relação ao eixo escolhido
	//	float aceleracao_x = (acc.ax)*g*ACC_RESOLUTION;
	float aceleracao_y = (acc->ay) * g * ACC_RESOLUTION;
	//	float aceleracao_z = (acc.az)*g*ACC_RESOLUTION;

	//Calcula velocidade em relação ao eixo escolhido
	//		float velocidade_x  = 0;
	//		float velocidade_aux_x = 0;
	float velocidade_y = 0;
	float velocidade_aux_y = 0;
	//		float velocidade_z  = 0;
	//		float velocidade_aux_z = 0;

	velocidade_y = velocidade_aux_y + Ts * aceleracao_y;
	velocidade_aux_y = velocidade_y;

	//	calcula as posições em relação ao eixo escolhido
	//	float posi_x = 0;
	//	float posi_aux_x = 0;
	float posi_y = 0;
	float posi_aux_y = 0;
	//	float posi_z = 0;
	//	float posi_aux_z = 0;

	posi_y = posi_aux_y + Ts * velocidade_y;
	posi_aux_y = posi_y;

	while (i < Tcal + 1) {
		//inicia rotina de calibração
		ACC_ReadRaw(acc);

		if (i < Tcal) {
			//acumula as variáveis do acelerômetro
			//LSB Sensitivy = 16384 LSB/g
			acc->AcelCUMx = acc->AcelCUMx + acc->ax;
			acc->AcelCUMy = acc->AcelCUMy + acc->ay;
			acc->AcelCUMz = acc->AcelCUMz + (acc->az - 16384);
			//acumula as variáveis do giroscópio
			acc->GyroCUMx = acc->GyroCUMx + acc->gx;
			acc->GyroCUMy = acc->GyroCUMy + acc->gy;
			acc->GyroCUMz = acc->GyroCUMz + acc->gz;
			//		acc_1.GyroCUMy = acc_1.GyroCUMy + acc_1.gy;
			//		acc_1.GyroCUMz = acc_1.GyroCUMz + acc_1.gz;

			acc->Acum_posi_inicial_y = posi_y + acc->Acum_posi_inicial_y;
			i++;
		} else {
			//calcula a media
			acc->M_ax = acc->AcelCUMx / i;
			acc->M_ay = acc->AcelCUMy / i;
			acc->M_az = acc->AcelCUMz / i;

			acc->M_gx = acc->GyroCUMx / i;
			acc->M_gy = acc->GyroCUMy / i;
			acc->M_gz = acc->GyroCUMz / i;
			//		acc_1.posi_inicial_x = acc_1.Acum_posi_inicial_x/i;
			acc->posi_inicial_y = acc->Acum_posi_inicial_y / i;
			//		acc_1.posi_inicial_z = acc_1.Acum_posi_inicial_z/i;
			i++;
		}
	}
}
float calcular_angulo(acc_data_t *acc_n) {
	ACC_ReadRaw(acc_n); // atualizar valores do sensor 1
	// Parâmetros da função sensorial
	float alfa = 0.98f;
	// velocidade angular do giroscopio
	float v_ang_z = (acc_n->gz - acc_n->M_gz) * 1.3323e-04;
	// calcula o ângulo com a integral da velocidade ângular
	angGy = angGy_aux + 2 * Ts * v_ang_z;
	angGy_aux = angGy;
	// solicita angulo do acelerometro
	acc_pitch = GetAccPitch(acc_n);
	// calcula angulo da fusão do giroscopio com acelerometro
	fused = alfa * (fused + v_ang_z * Ts) + (1 - alfa) * acc_pitch;
	return fused;
}
void configurar_interrupcao_Hz(float Hz) {
	uint32_t usec = 1000000.0 / Hz;
	//	TPM_SetTimerPeriod(TPM1, USEC_TO_COUNT(usec, CLOCK_GetBusClkFreq()));
	//	TPM_EnableInterrupts(TPM1, kTPM_Chnl0InterruptEnable);
	//	TPM_StartTimer(TPM1, kTPM_SystemClock);

	/* Structure of initialize PIT */
	pit_config_t pitConfig;

	/* Board pin, clock, debug console init */
	//BOARD_InitHardware();
	PIT_GetDefaultConfig(&pitConfig);

	/* Init pit module */
	PIT_Init(PIT, &pitConfig);

	/* Set timer period for channel 0 */
	PIT_SetTimerPeriod(PIT, kPIT_Chnl_0,
			USEC_TO_COUNT(usec, CLOCK_GetBusClkFreq()));

	/* Enable timer interrupts for channel 0 */
	PIT_EnableInterrupts(PIT, kPIT_Chnl_0, kPIT_TimerInterruptEnable);

	/* Enable at the NVIC */
	EnableIRQ(PIT_IRQn);

	/* Start channel 0 */
	PRINTF("\r\nStarting channel No.0 ...");
	PIT_StartTimer(PIT, kPIT_Chnl_0);

}
void inicializar_PWMs() {
	tpm_config_t MeuPWM = { .enableDebugMode = false, .enableDoze = false,
			.enableReloadOnTrigger = false, .enableStartOnTrigger = false,
			.enableStopOnOverflow = false, .prescale = kTPM_Prescale_Divide_8,
			.useGlobalTimeBase =
			false, };

	//Inicializa TPM (Timer / PWM Module)
	TPM_Init(TPM0, &MeuPWM);
	//Configuração dos dois canais para o TPM2 (Vetor)
	tpm_chnl_pwm_signal_param_t MeuCanalPWM1[4] = { { .chnlNumber = 0,
			.dutyCyclePercent = 0, .level = kTPM_HighTrue }, { .chnlNumber = 1,
			.dutyCyclePercent = 0, .level = kTPM_HighTrue }, { .chnlNumber = 2,
			.dutyCyclePercent = 0, .level = kTPM_HighTrue }, { .chnlNumber = 3,
			.dutyCyclePercent = 0, .level = kTPM_HighTrue } };

	//Incializadao do PWM. Modulo TPM1, 2 Canais. Verificar que argumento 2 pode ser um vetor de estutura de canais (declarado acima)
	TPM_SetupPwm(TPM0, MeuCanalPWM1, 4, kTPM_EdgeAlignedPwm, 50,
			CLOCK_GetPllFllSelClkFreq());
	//Incializadao do PWM. Modulo TPM0, 1 Canal.

	TPM_StartTimer(TPM0, kTPM_SystemClock);

}
void inicializar_I2Cs() {

	// Configuração Inicial de i2c0
	i2c_master_config_t I2C0_Config = { .baudRate_Bps = 400000, .enableMaster =
	true, .enableStopHold = false, };
	I2C_MasterInit(I2C0, &I2C0_Config, CLOCK_GetBusClkFreq());
	// Configuração Inicial de i2c1
	i2c_master_config_t I2C1_Config = { .baudRate_Bps = 400000, .enableMaster =
	true, .enableStopHold = false, };
	I2C_MasterInit(I2C1, &I2C1_Config, CLOCK_GetBusClkFreq());

}
void inicializar_sensores() {
	// Instanciar Sensores
	bool acc_init = ACC_Init(&acc_1);
	while (!acc_init) {
		printf("\nsensor nao respondeu.. ");
		inicializar_I2Cs();
		acc_init = ACC_Init(&acc_1);
	}
	//printf("\nsensor respondeu :D ");
}
void atualizar_Duty_PWM(unsigned long duty_0, unsigned long duty_1,
		unsigned long duty_2) {
	TPM_UpdatePwmDutycycle(TPM0, 0, kTPM_EdgeAlignedPwm, duty_0); // motor 2 ini 4
	TPM_UpdatePwmDutycycle(TPM0, 1, kTPM_EdgeAlignedPwm, duty_1); // motor 3 ini 3
	TPM_UpdatePwmDutycycle(TPM0, 2, kTPM_EdgeAlignedPwm, duty_2); // motor 5 ini 8
	TPM_UpdatePwmDutycycle(TPM0, 3, kTPM_EdgeAlignedPwm, 8);
}
void delay_1000(unsigned long n) {
	n = n * 1000;
	while (n > 0)
		n--;
}

void teste_de_valores_iniciais() {
	// Teste dos Valores Iniciais
	printf("\nDigite o valor para o primeiro motor: ");
	scanf("%d", &duty_0); // 8.... 8
	printf("\nDigite o valor para o segundo motor: ");
	scanf("%d", &duty_1); // 10 .... 7
	printf("\nDigite o valor para o terceiro motor: ");
	scanf("%d", &duty_2); // 5  ... 10
	atualizar_Duty_PWM(duty_0, duty_1, duty_2);
}
void teste_de_pwm_preciso(int n_pwm) {
// printf("Entrou na Iterrupcao PIT : CONTADOR = %d \r \n", contador * 10);
	if (contador_2 > 7600) { // 7700
		direcao_2 = 0;
	} // decrementar
	if (contador_2 < 1300) {
		direcao_2 = 1; // incrementar
	}
	if (direcao_2 == 1) {
		contador_2 = contador_2 + 2;
	} else {
		contador_2 = contador_2 - 2;
	}

	TPM0->CONTROLS[n_pwm].CnV = contador_2;
}

void rotina_interrupcao_1() {
//	teste_de_valores_iniciais(1);
	//teste_de_pwm_preciso(0);

//	if (k < 3000) {
//		TPM0->CONTROLS[0].CnV = valor_prbs;
//		k++;
//	} else {
//		aleatorio = rand();
//		aleatorio = (aleatorio / 0x7fffffff);
//		valor_prbs = aleatorio * 3.14;
//
//	}

	if (k <= 3000) {
		valor_pwm = 2038, 22 * valor_prbs[amostra] + 1200;
		TPM0->CONTROLS[0].CnV = valor_prbs[amostra];
		k++;
	} else {
		amostra++;
		k = 3000;
		valor_pwm = 2038, 22 * valor_prbs[amostra] + 1200;
		TPM0->CONTROLS[0].CnV = valor_prbs[amostra];
	}

//	atualizar_Duty_PWM(duty_0, duty_1, duty_2);

	calcular_angulo(&acc_1);
	int valor_da = 652 * angGy;

	atualizar_dac(valor_da);
}
void PIT_DriverIRQHandler() {
	if (PIT_GetStatusFlags(PIT, kPIT_Chnl_0)) {
		PIT_ClearStatusFlags(PIT, kPIT_Chnl_0, kPIT_TimerFlag);
		rotina_interrupcao_1();
	}
}
int main(void) {
	/* Init board hardware. */
	BOARD_InitBootPins();
	BOARD_InitBootClocks();
	BOARD_InitBootPeripherals();
	/* Init FSL debug console. */
	BOARD_InitDebugConsole();

	inicializar_PWMs();
	atualizar_Duty_PWM(duty_0, duty_1, duty_2);
	TPM0->CONTROLS[0].CnV = 1300;
	delay_1000(10000);

	inicializar_I2Cs();
	printf("\nComunicacao I2C inicializada ");
	inicializar_sensores();

	printf("\nComunicacao Sensores inicializada ");
	calibrar_sensor(&acc_1);
	//	call_calibra(&acc_2);
	//	call_calibra(&acc_3);
	//	call_calibra(&acc_4);
	printf("\nsensores calibrados");
	inicializar_dac(3.14);
	configurar_interrupcao_Hz(100);

	//configurar_interrupcao_Hz(100);

	while (1) {
		__asm volatile ("nop");
	}
	return 0;
}
